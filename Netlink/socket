fd_set read_mask;
	fd_set write_mask;

	struct timeval tv; 
	tv.tv_sec = 120; /* seconds */
	tv.tv_usec = 0;
	int opt = 1;

	dumpPeriod = dumpPeriod + 0.5;
    	if (dumpPeriod < 15)
    	{
        	return 0;
    	}
	int socket_desc , client_sock, c , read_size, accept_socket;
	struct sockaddr_in server , client;
	char client_message[10];
	memset(client_message, 0, sizeof(client_message));


	//Create socket
	socket_desc = socket(AF_INET, SOCK_STREAM , 0);
	if (socket == -1)
	{
		printf("Could not create socket");
	}
	printf("Socket created");

	//Prepare the sockaddr_in structure
	server.sin_family = AF_INET;
	server.sin_addr.s_addr = INADDR_ANY;
	server.sin_port=htons(LIME_PORT);

	//Bind
	if( bind(socket_desc,(struct sockaddr *)&server , sizeof(server)) < 0)
	{
		//print the error message
		perror("bind failed. error");
		return 1;
	}

	//Listen
	listen(socket_desc , 3);

	//Accept and incoming connection

	c = sizeof(struct sockaddr_in);

	//accept connection from an incoming server
	accept_socket = accept(socket_desc, (struct sockaddr *)&client, 		(socklen_t*)&c);

	
	//if (client_sock < 0)
	//{
	//	perror("accept failed");
	//	return 1;
	//}

	FD_ZERO(&read_mask);
	FD_ZERO(&write_mask);
 
	FD_SET(accept_socket, &read_mask);
	FD_SET(accept_socket, &write_mask);

	int select_return = select(accept_socket, &read_mask, (fd_set *)0, (fd_set *)0, &tv);
	
	if(select_return < 0) /* [timeout=0, -1= ERROR] is returned */
	{
	    printf("recv: select functions returned -1 error value\n");
	}
	else if(select_return == 0)
	{
	    printf("recv: select functions returned 0 timeout value\n");
	}
	else
	{
    		printf("recv: select functions returned a positive value\n");
  		
		if(FD_ISSET(accept_socket, &read_mask))
		{
			
			read_size = recv(accept_socket, client_message , 2000 , 0);

			//Recieve a message from server
	if( read_size > 0)
	{
			if (strcmp(client_message,"Yes")==0)
			{
			    dumpPeriod = 0;
			    close(accept_socket);
			    close(socket_desc);
		    	    take_dump();
			}

				//send the message back to server
			write(accept_socket , client_message , strlen(client_message));

			if(read_size == 0)
			{
				puts("Client disconnected");
				fflush(stdout);
			}
			else if(read_size == -1)
			{
				perror("recv failed");
			}
	}
	

	//if (client_sock < 0)
	//{
	//	perror("accept failed");
	//	return 1;
	//}

    	}

	}
   	close(socket_desc);
	return 0;
